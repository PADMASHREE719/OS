#include<stdio.h>
#include<stdlib.h>

struct process{
int pid;
int rt;
int ct;
int bt;
int at;
int tat;
int wt;
int completed;
int remaining_bt;
};


void inputProcess(struct process p[],int n)
{
    for(int i=0;i<n;i++)
    {
        p[i].pid=i+1;
        printf("\n enter at and bt of process %d",p[i].pid);
        scanf("%d %d",&p[i].at,&p[i].bt);
        p[i].remaining_bt=p[i].bt;
        p[i].completed=0;
    }

}

void printResults(struct process p[], int n, float avgWT, float avgTAT) {
    printf("\nPID\tAT\tBT\tCT\tTAT\tWT\tRT\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t%d\t%d\t%d\t%d\t%d\n", p[i].pid, p[i].at, p[i].bt, p[i].ct, p[i].tat, p[i].wt, p[i].rt);
    }
    printf("\nAverage Waiting Time: %.2f", avgWT);
    printf("\nAverage Turnaround Time: %.2f\n", avgTAT);
}

void non_preemtive_sjf(struct process p[],int n)
{
    float totalwt=0,totaltat=0;
    int completed=0,time=0,idx;;
    while(completed<n)
    {
        idx=-1;
        int min=999;
        for(int i=0;i<n;i++)
        {
            if(p[i].at<=time&&!p[i].completed&&p[i].bt<min)
            {
                min=p[i].bt;
                idx=i;
            }
        }
        if(idx!=-1)
        {
            completed++;
            p[idx].rt=time-p[idx].at;
            if(p[idx].rt<0)
            {
                p[idx].rt=0;
            }
            time+=p[idx].bt;
            p[idx].ct=time;
            p[idx].tat=p[idx].ct-p[idx].at;
            p[idx].wt=p[idx].tat-p[idx].bt;
            p[idx].completed=1;
            totalwt+=p[idx].wt;
            totaltat+=p[idx].tat;
        }
        else{   //******
            time++;
        }
    }
    printResults(p,n,totalwt/n,totaltat/n);
}

void preemtive_sjf(struct process p[],int n)
{
    float totalwt=0,totaltat=0;
    int completed=0,time=0,idx=-1,min=999;
    int response_time[n]; //****
    for(int i=0;i<n;i++) //*****
    {
        response_time[i]=-1;
    }
    while(completed<n)
    {
        idx=-1;
        int min=999;
        for(int i=0;i<n;i++)
        {
            if(p[i].at<=time&&!p[i].completed&&p[i].remaining_bt<min&&p[i].remaining_bt>0) //***
            {
                min=p[i].remaining_bt;
                idx=i;
            }
        }
        if(idx!=-1)
        {
            if(response_time[idx]==-1)
            {
                response_time[idx]=time;//***
            }
            p[idx].remaining_bt--; //*****
            time++;
            if(p[idx].remaining_bt==0)
            {
                p[idx].rt=response_time[idx]-p[idx].at; //*******
                if(p[idx].rt<0)
                {
                    p[idx].rt=0;
                }
                p[idx].completed=1;
                completed++;
                p[idx].ct=time;
                p[idx].tat=p[idx].ct-p[idx].at;
                p[idx].wt=p[idx].tat-p[idx].bt;
                totalwt+=p[idx].wt;
                totaltat+=p[idx].tat;
            }
        }
        else
        {
            time++;
        }
    }
    printResults(p,n,totalwt/n,totaltat/n);
}


void main()
{
    int n,choice;
    printf("\n Enter number of processor:");
    scanf("%d",&n);
    struct process p[n];
    inputProcess(p,n);
    while(1)
    {
        printf("\n available operations are:");
        printf("\n 1.preemtive");
        printf("\n 2. Non preemtive");
        printf("\n enter your choice:");
        scanf("%d",&choice);

        switch(choice)
        {
            case 1: preemtive_sjf(p,n);
                    break;
            case 2:non_preemtive_sjf(p,n);
                    break;
            default:printf("\n Enter the valid choice:");
                    break;
        }
    }

}
